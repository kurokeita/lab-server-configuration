name: "lab-services"

services:
  ###### Portainer #########
  portainer:
    image: portainer/portainer-ee:latest
    container_name: lab.portainer
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "portainer"
      tsdproxy.container_port: "9000"
      tsdproxy.ephemeral: "true"
    depends_on:
      keycloak:
        condition: service_healthy
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer/:/data
    environment:
      - PORTAINER_DISABLE_SSL=true
      - PORTAINER_HTTP_ONLY=1
    networks:
      - lab

  ###### Uptime Kuma #########
  kuma:
    image: louislam/uptime-kuma:1
    container_name: lab.uptime_kuma
    restart: unless-stopped
    volumes:
      - ./data/uptime_kuma:/app/data
    networks:
      - lab

  ###### Keycloak #########
  keycloak:
    container_name: lab.keycloak
    image: quay.io/keycloak/keycloak:latest
    healthcheck:
      test: chmod +x /opt/healthcheck.sh && /opt/healthcheck.sh || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_PROXY: edge
      KC_HTTP_ENABLED: true
      KC_DB: mariadb
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_URL_HOST: ${KC_DB_HOST}
      KC_DB_URL_PORT: ${KC_DB_PORT}
      KC_HOSTNAME: keycloak.kurokeita.dev
      KC_HEALTH_ENABLED: true
    volumes:
      - ./data/keycloak:/opt/keycloak/data/
      - ./healthcheck/keycloak.sh:/opt/healthcheck.sh
    command: start
    user: root
    networks:
      - lab

  ###### CloudFlare Tunnel #########
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: lab.tunnel
    restart: always
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    networks:
      - lab

  ###### ddclient for Dynamic DNS #########
  ddclient:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: lab.ddclient
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./data/ddclient:/config
    restart: always
    networks:
      - lab

  ###### Redis #########
  redis:
    container_name: lab.redis
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - ./data/redis:/data
    networks:
      - lab

  ###### Paperless #########
  paperless:
    container_name: lab.paperless
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./data/paperless/data:/usr/src/paperless/data
      - ./data/paperless/media:/usr/src/paperless/media
      - ./data/paperless/export:/usr/src/paperless/export
      - ./data/paperless/consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBENGINE: mariadb
      PAPERLESS_DBHOST: ${PAPERLESS_DB_HOST}
      PAPERLESS_DBUSER: ${PAPERLESS_DB_USERNAME}
      PAPERLESS_DBPASS: ${PAPERLESS_DB_PASSWORD}
      PAPERLESS_DBPORT: ${PAPERLESS_DB_PORT}
      PAPERLESS_CSRF_TRUSTED_ORIGINS: ${PAPERLESS_URL}
    networks:
      - lab
    profiles:
      - paperless

  ###### Wireguard #########
  wireguard:
    container_name: lab.wireguard
    image: lscr.io/linuxserver/wireguard:latest
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - SERVERURL=${WIREGUARD_DOMAIN}
      - PEERS=${WIREGUARD_PEER_NUMBER}
      - PEERDNS=${WIREGUARD_PEER_DNS}
      - PERSISTENTKEEPALIVE_PEERS=all
      - LOG_CONFS=true
    volumes:
      - ./data/wireguard/config:/config
    ports:
      - 51820:51820/udp
    restart: unless-stopped
    networks:
      - lab
    profiles:
      - vpn

  ###### Adguard Home #########
  adguard:
    container_name: lab.adguard_home
    image: adguard/adguardhome:latest
    restart: unless-stopped
    ports:
      - 3000:3000/tcp
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
    networks:
      - lab
    profiles:
      - vpn

  ###### tsdproxy #########
  tsdproxy:
    image: almeidapaulopt/tsdproxy:latest
    container_name: lab.tsdproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/tsdproxydata/data:/data
      - ./data/tsdproxydata/config:/config
    environment:
      - TSDPROXY_AUTHKEY=${TS_AUTHKEY}
      - DOCKER_HOST=unix:///var/run/docker.sock
    restart: unless-stopped
    networks:
      - lab

networks:
  lab:
    driver: bridge
